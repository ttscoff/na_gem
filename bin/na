#!/usr/bin/env ruby
# frozen_string_literal: true

$LOAD_PATH.unshift File.join(__dir__, '..', 'lib')
require 'gli'
require 'na/help_monkey_patch'
require 'na'
require 'na/benchmark'
require 'fcntl'
require 'tempfile'

NA::Benchmark.init
NA::Benchmark.measure('Gem loading') { nil } # Measures time up to this point

# Search for XDG compliant config first. Default to ~/.na.rc for compatibility
def self.find_config_file
  home = Dir.home
  xdg_config_home = ENV['XDG_CONFIG_HOME'] || File.join(home, '.config')

  rc_paths = [
    File.join(xdg_config_home, 'na', 'na.rc'),  # Check $XDG_CONFIG_HOME/na/na.rc first
    File.join(xdg_config_home, 'na.rc'),        # Then check $XDG_CONFIG_HOME/na.rc
    File.join(home, '.na.rc')                   # Finally check ~/.na.rc for compatibility
  ]

  # Return the first path that exists
  existing_path = rc_paths.find { |path| File.exist?(path) }

  # If none exist, return XDG-compliant path for creation
  existing_path || File.join(xdg_config_home, 'na', 'na.rc')
end

# Main application
class App
  extend GLI::App

  program_desc 'Add and list next actions for the current project'

  version Na::VERSION
  hide_commands_without_desc true
  autocomplete_commands false
  wrap_help_text :one_line unless $stdout.isatty

  config_file '.na.rc'

  desc 'File extension to consider a todo file'
  default_value 'taskpaper'
  arg_name 'EXT'
  flag :ext

  desc 'Include file extension in display'
  switch :include_ext, default_value: false, negatable: false

  desc 'Tag to consider a next action'
  default_value 'na'
  arg_name 'TAG'
  flag %i[t na_tag]

  desc 'Enable pagination'
  switch %i[pager], default_value: true, negatable: true

  default_command :next

  NA::Color.coloring = $stdin.isatty
  NA::Pager.paginate = $stdin.isatty

  desc 'Add a next action (deprecated, for backwards compatibility)'
  switch %i[a add], negatable: false

  desc 'Colorize output'
  switch %i[color], negatable: true, default_value: true

  desc 'Set a priority 0-5 (deprecated, for backwards compatibility)'
  arg_name 'PRIORITY'
  flag %i[p priority]

  desc 'Use a single file as global todo, use initconfig to make permanent'
  arg_name 'PATH'
  flag %i[f file]

  desc 'Use a taskpaper file named after the git repository (enables git integration)'
  arg_name 'REPO_TOP'
  switch %i[repo-top], default_value: false

  desc 'Provide a template for new/blank todo files, use initconfig to make permanent'
  flag %(template)

  desc 'Use current working directory as [p]roject, [t]ag, or [n]one'
  arg_name 'TYPE'
  flag %i[cwd_as], must_match: /^[ptn].*?$/i, default_value: 'none'

  desc 'Add all new/moved entries at [s]tart or [e]nd of target project'
  arg_name 'POSITION'
  flag %i[add_at], default_value: 'start'

  desc 'Prompt for additional notes (deprecated, for backwards compatibility)'
  switch %i[n note], negatable: false

  desc 'Recurse 3 directories deep (deprecated, for backwards compatability)'
  switch %i[r recurse], default_value: false, negatable: true

  desc 'Recurse to depth'
  arg_name 'DEPTH'
  default_value 1
  flag %i[d depth], type: :integer, must_match: /^[1-9]$/

  desc 'Display verbose output'
  switch %i[debug], default_value: false

  Dir.glob(File.join(File.dirname(__FILE__), 'commands/*.rb')).each do |cmd|
    require_relative "commands/#{File.basename(cmd, '.rb')}"
  end

  pre do |global, _command, _options, _args|
    NA.move_deprecated_backups
    NA.verbose = global[:debug]
    NA::Pager.paginate = global[:pager] && $stdout.isatty
    NA::Color.coloring = global[:color] && $stdout.isatty
    NA.extension = global[:ext]
    NA.include_ext = global[:include_ext]
    NA.na_tag = global[:na_tag]
    NA.global_file = global[:file]
    NA.cwd = File.basename(ENV.fetch('PWD', nil))
    NA.cwd_is = if global[:cwd_as] =~ /^n/
                  :none
                else
                  global[:cwd_as] =~ /^p/ ? :project : :tag
                end

    # start of git repo addition ==================================
    # Use git repo if --repo-top flag is specified
    if global[:repo_top]
      begin
        require 'git'

        # Check if we're in a git repo first
        in_git_repo = system('git rev-parse --is-inside-work-tree >/dev/null 2>&1')

        if in_git_repo
          g = Git.open('.', log: Logger.new(File::NULL)) # Silence Git logs
          repo_root = g.dir.path
          repo_name = File.basename(repo_root)
          taskpaper_file = File.join(repo_root, "#{repo_name}.#{NA.extension}")
          NA.notify("Using repository taskpaper file: #{taskpaper_file}", debug: true)
          NA.global_file = taskpaper_file
          # Add this block to create the file if it doesn't exist
          unless File.exist?(taskpaper_file)
            res = NA.yn(NA::Color.template("#{NA.theme[:warning]}Repository file not found, create #{taskpaper_file}"),
                        default: true)
            if res
              NA.create_todo(taskpaper_file, repo_name, template: global[:template])
            else
              NA.notify("#{NA.theme[:error]}Cancelled", exit_code: 1)
            end
          end
        else
          NA.notify("#{NA.theme[:warning]}Not in a git repository, using default file location logic.", debug: true)
        end
      rescue LoadError
        NA.notify("#{NA.theme[:error]}Git gem not installed. Run 'gem install git' to use --repo option.", exit_code: 1)
      end
    end
    # end of git repo addition ====================================

    NA.weed_cache_file
    NA.notify("{dw}{ globals: #{NA.globals}, command_line: #{NA.command_line}, command: #{NA.command}}", debug: true)
    true
  end

  post do |global, command, options, args|
    # post actions
  end

  on_error do |exception|
    case exception
    when GLI::UnknownCommand
      if NA.command_line.count == 1
        cmd = ['saved']
        cmd.concat(ARGV.unshift(NA.command_line[0]))

        exit run(cmd)
      elsif NA.globals.include?('-a') || NA.globals.include?('--add')
        cmd = ['add']
        cmd.concat(NA.command_line)
        NA.globals.delete('-a')
        NA.globals.delete('--add')
        cmd.unshift(*NA.globals)

        exit run(cmd)
      end
      true
    when SystemExit
      false
    else
      true
    end
  end
end

NA.stdin = $stdin.read.strip if $stdin.stat.size.positive? || $stdin.fcntl(Fcntl::F_GETFL, 0).zero?
NA.stdin = nil unless NA.stdin&.length&.positive?

NA.globals = []
NA.command_line = []
in_globals = true
ARGV.each do |arg|
  if arg =~ /^-/ && in_globals
    NA.globals.push(arg)
  else
    NA.command_line.push(arg)
    in_globals = false
  end
end
NA.command = NA.command_line[0]

exit_code = App.run(ARGV)
NA::Benchmark.report
exit exit_code
